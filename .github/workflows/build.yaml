name: release
on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - dev

env:
  GCP_PROJECT: quantm-live
  GCP_ARTIFACT_REPOSITORY: us-docker.pkg.dev/quantm-live/default-live-v1
  GKE_CLUSTER: alpha-live-v1
  GKE_CLUSTER_ZONE: us-central1
  GCR_SERVICE: quantm-api-live-v1

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up QEMU (for cross-compilation support)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Go Build Cache for Docker
        uses: actions/cache@v4
        with:
          path: go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Authenticate with GCP
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: access_token
          credentials_json: ${{ secrets.GCP_JSON_KEY }}
          access_token_lifetime: 600s

      - name: Login into Google Artifact Registry
        id: auth-gcp-artifact-registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCP_ARTIFACT_REPOSITORY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_CLUSTER_ZONE }}

      - name: Inject go-build-cache into Docker
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: go-build-cache

      - name: Build & Push Docker Image - API
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: .
          target: api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ env.GCP_ARTIFACT_REPOSITORY }}/api:latest
            ${{ env.GCP_ARTIFACT_REPOSITORY }}/api:${{ steps.vars.outputs.short_sha }}

      - name: Build & Push Docker Image - Mothership
        id: build-mothership
        uses: docker/build-push-action@v5
        with:
          context: .
          target: mothership
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ env.GCP_ARTIFACT_REPOSITORY }}/mothership:latest
            ${{ env.GCP_ARTIFACT_REPOSITORY }}/mothership:${{ steps.vars.outputs.short_sha }}

      - name: Build & Push Docker Image - Migrate
        id: build-migrate
        uses: docker/build-push-action@v5
        with:
          context: .
          target: migrate
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ env.GCP_ARTIFACT_REPOSITORY }}/migrate:latest
            ${{ env.GCP_ARTIFACT_REPOSITORY }}/migrate:${{ steps.vars.outputs.short_sha }}

      - name: Get Quantm Deployments in GKE
        id: get-gke-deployments
        run: |
          kubectl get -n quantm deploy

      - name: Deploy mothership docker image to the GKE cluster
        id: deploy-mothership
        run: |
          kubectl patch -n quantm deployment mothership -p \
          '{"spec":{"template":{"spec":{"containers":[{"name":"mothership","image":"us-docker.pkg.dev/quantm-live/default-live-v1/mothership:${{ steps.vars.outputs.short_sha }}"}]}}}}'

      - name: Deploy API to Cloud Run
        id: deploy-api
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.GCR_SERVICE }}
          image: ${{ env.GCP_ARTIFACT_REPOSITORY }}/api:${{ steps.vars.outputs.short_sha }}

      - name: Healthcheck for API
        id: healthcheck-api
        run: curl ${{ steps.deploy-api.outputs.url }}

      - name: docker ls
        run: docker image ls
