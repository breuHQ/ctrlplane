# Copyright Â© 2022, Breu, Inc. <info@breu.io>. All rights reserved.
#
# This software is made available by Breu, Inc., under the terms of the BREU COMMUNITY LICENSE AGREEMENT, Version 1.0,
# found at https://www.breu.io/license/community. BY INSTALLING, DOWNLOADING, ACCESSING, USING OR DISTRIBUTING ANY OF
# THE SOFTWARE, YOU AGREE TO THE TERMS OF THE LICENSE AGREEMENT.
#
# The above copyright notice and the subsequent license agreement shall be included in all copies or substantial
# portions of the software.
#
# Breu, Inc. HEREBY DISCLAIMS ANY AND ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, AND
# SPECIFICALLY DISCLAIMS ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, WITH RESPECT TO THE
# SOFTWARE.
#
# Breu, Inc. SHALL NOT BE LIABLE FOR ANY DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO, LOST PROFITS OR ANY
# CONSEQUENTIAL, SPECIAL, INCIDENTAL, INDIRECT, OR DIRECT DAMAGES, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# ARISING OUT OF THIS AGREEMENT. THE FOREGOING SHALL APPLY TO THE EXTENT PERMITTED BY APPLICABLE LAW.

definitions:
  auth.CreateAPIKeyRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  auth.CreateAPIKeyResponse:
    properties:
      key:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegistrationRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      team_name:
        type: string
    required:
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    - team_name
    type: object
  auth.RegistrationResponse:
    properties:
      team:
        $ref: '#/definitions/entities.Team'
      user:
        $ref: '#/definitions/entities.User'
    type: object
  auth.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  core.AppCreateRequest:
    properties:
      config:
        $ref: '#/definitions/entities.AppConfig'
      name:
        type: string
    type: object
  core.AppRepoCreateRequest:
    properties:
      default_branch:
        type: string
      is_monorepo:
        type: boolean
      provider:
        type: string
      repo_id:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  entities.App:
    properties:
      config:
        $ref: '#/definitions/entities.AppConfig'
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      team_id:
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  entities.AppConfig:
    type: object
  entities.GithubRepo:
    properties:
      created_at:
        type: string
      full_name:
        type: string
      github_id:
        type: integer
      id:
        type: string
      name:
        type: string
      team_id:
        type: string
      updated_at:
        type: string
    required:
    - full_name
    - github_id
    - name
    type: object
  entities.Repo:
    properties:
      app_id:
        type: string
      created_at:
        type: string
      default_branch:
        description: The default branch to keep track of major releases.
        type: string
      id:
        type: string
      is_monorepo:
        description: app can have multiple repos
        type: boolean
      provider:
        description: can be github, gitlab, bitbucket, etc
        type: string
      repo_id:
        type: string
      updated_at:
        type: string
    type: object
  entities.Team:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  entities.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      team_id:
        type: string
      updated_at:
        type: string
    required:
    - email
    type: object
  github.CompleteInstallationRequest:
    properties:
      installation_id:
        type: integer
      setup_action:
        type: string
    type: object
  github.WorkflowRunResponse:
    properties:
      id:
        type: string
      run_id:
        type: string
    type: object
  main.HealthCheckResponse:
    properties:
      msg:
        type: string
    type: object
info:
  contact: {}
paths:
  /apps:
    get:
      consumes:
      - application/json
      description: List all apps for a team.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.App'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: List all apps for a team.
      tags:
      - core
    post:
      consumes:
      - application/json
      description: Create a new app.
      parameters:
      - description: AppCreateRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.AppCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.App'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a new app.
      tags:
      - core
  /apps/{slug}:
    get:
      consumes:
      - application/json
      description: Get an app by slug.
      parameters:
      - description: App slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.App'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get an app by slug.
      tags:
      - core
  /apps/{slug}/repos:
    get:
      consumes:
      - application/json
      description: List all repos given an app.
      parameters:
      - description: App slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Repo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: List all repos given an app.
      tags:
      - core
    post:
      consumes:
      - application/json
      description: Create a new repo for an app.
      parameters:
      - description: App slug
        in: path
        name: slug
        required: true
        type: string
      - description: AppRepoCreateRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.AppRepoCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Repo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a new repo for an app.
      tags:
      - core
  /auth/api-keys/team:
    post:
      consumes:
      - application/json
      description: Create a new API Key for team.
      parameters:
      - description: CreateAPIKeyRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.CreateAPIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a new API Key for team.
      tags:
      - auth
  /auth/api-keys/user:
    post:
      consumes:
      - application/json
      description: Create a new API Key for user.
      parameters:
      - description: CreateAPIKeyRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.CreateAPIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a new API Key for user.
      tags:
      - auth
  /auth/api-keys/validate:
    get:
      consumes:
      - application/json
      description: Parses the header and validates the API Key.
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Parses the header and validates the API Key.
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Get short lived JWT token along with a refresh token.
      parameters:
      - description: LoginRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get short lived JWT token along with a refresh token.
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user.
      parameters:
      - description: RegistrationRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.RegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Registers a new user.
      tags:
      - auth
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Quick health check
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.HealthCheckResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Checks if connection to all external services are working fine.
      tags:
      - healthcheck
  /provders/github/complete-installation:
    post:
      consumes:
      - application/json
      description: Completes the installation of a GitHub app.
      parameters:
      - description: CompleteInstallationRequest
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github.CompleteInstallationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.WorkflowRunResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Completes the installation of a GitHub app.
      tags:
      - providers
      - github
  /provders/github/repos:
    get:
      consumes:
      - application/json
      description: Get GitHub repositories.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.GithubRepo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get GitHub repositories.
      tags:
      - providers
      - github
swagger: "2.0"
