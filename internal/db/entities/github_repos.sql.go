// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: github_repos.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const activateGithubRepo = `-- name: ActivateGithubRepo :exec
UPDATE github_repos
SET is_active = true
WHERE id = $1
`

func (q *Queries) ActivateGithubRepo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, activateGithubRepo, id)
	return err
}

const createGithubRepo = `-- name: CreateGithubRepo :one
INSERT INTO github_repos (installation_id, github_id, name, full_name, url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, installation_id, github_id, name, full_name, url, is_active
`

type CreateGithubRepoParams struct {
	InstallationID uuid.UUID `json:"installation_id"`
	GithubID       int64     `json:"github_id"`
	Name           string    `json:"name"`
	FullName       string    `json:"full_name"`
	Url            string    `json:"url"`
}

func (q *Queries) CreateGithubRepo(ctx context.Context, arg CreateGithubRepoParams) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, createGithubRepo,
		arg.InstallationID,
		arg.GithubID,
		arg.Name,
		arg.FullName,
		arg.Url,
	)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
	)
	return i, err
}

const getGithubRepoByID = `-- name: GetGithubRepoByID :one
SELECT id, created_at, updated_at, installation_id, github_id, name, full_name, url, is_active
FROM github_repos
WHERE id = $1
`

func (q *Queries) GetGithubRepoByID(ctx context.Context, id uuid.UUID) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, getGithubRepoByID, id)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
	)
	return i, err
}

const getGithubRepoByInstallationIDAndGithubID = `-- name: GetGithubRepoByInstallationIDAndGithubID :one
SELECT id, created_at, updated_at, installation_id, github_id, name, full_name, url, is_active
FROM github_repos
WHERE installation_id = $1 AND github_id = $2
`

type GetGithubRepoByInstallationIDAndGithubIDParams struct {
	InstallationID uuid.UUID `json:"installation_id"`
	GithubID       int64     `json:"github_id"`
}

func (q *Queries) GetGithubRepoByInstallationIDAndGithubID(ctx context.Context, arg GetGithubRepoByInstallationIDAndGithubIDParams) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, getGithubRepoByInstallationIDAndGithubID, arg.InstallationID, arg.GithubID)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
	)
	return i, err
}

const suspendedGithubRepo = `-- name: SuspendedGithubRepo :exec
UPDATE github_repos
SET is_active = false
WHERE id = $1
`

func (q *Queries) SuspendedGithubRepo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, suspendedGithubRepo, id)
	return err
}
