// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: github_repos.sql

package entities

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateGithubRepo = `-- name: ActivateGithubRepo :exec
UPDATE github_repos
SET is_active = true
WHERE id = $1
`

func (q *Queries) ActivateGithubRepo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, activateGithubRepo, id)
	return err
}

const createGithubRepo = `-- name: CreateGithubRepo :one
INSERT INTO github_repos (installation_id, github_id, name, full_name, url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, repo_id, installation_id, github_id, name, full_name, url, is_active
`

type CreateGithubRepoParams struct {
	InstallationID uuid.UUID `json:"installation_id"`
	GithubID       int64     `json:"github_id"`
	Name           string    `json:"name"`
	FullName       string    `json:"full_name"`
	Url            string    `json:"url"`
}

func (q *Queries) CreateGithubRepo(ctx context.Context, arg CreateGithubRepoParams) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, createGithubRepo,
		arg.InstallationID,
		arg.GithubID,
		arg.Name,
		arg.FullName,
		arg.Url,
	)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepoID,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
	)
	return i, err
}

const getGithubRepoByID = `-- name: GetGithubRepoByID :one
SELECT id, created_at, updated_at, repo_id, installation_id, github_id, name, full_name, url, is_active
FROM github_repos
WHERE id = $1
`

func (q *Queries) GetGithubRepoByID(ctx context.Context, id uuid.UUID) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, getGithubRepoByID, id)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepoID,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
	)
	return i, err
}

const getGithubRepoByInstallationIDAndGithubID = `-- name: GetGithubRepoByInstallationIDAndGithubID :one
SELECT id, created_at, updated_at, repo_id, installation_id, github_id, name, full_name, url, is_active
FROM github_repos
WHERE installation_id = $1 AND github_id = $2
`

type GetGithubRepoByInstallationIDAndGithubIDParams struct {
	InstallationID uuid.UUID `json:"installation_id"`
	GithubID       int64     `json:"github_id"`
}

func (q *Queries) GetGithubRepoByInstallationIDAndGithubID(ctx context.Context, arg GetGithubRepoByInstallationIDAndGithubIDParams) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, getGithubRepoByInstallationIDAndGithubID, arg.InstallationID, arg.GithubID)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepoID,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
	)
	return i, err
}

const getGithubReposWithCoreRepo = `-- name: GetGithubReposWithCoreRepo :one
SELECT
    g.id, g.created_at, g.updated_at, g.repo_id, g.installation_id, g.github_id, g.name, g.full_name, g.url, g.is_active,
    json_build_object(
        'repo_id', r.id,
        'repo_name', r.name,
        'provider', r.provider,
        'provider_id', r.provider_id,
        'default_branch', r.default_branch,
        'is_monorepo', r.is_monorepo,
        'threshold', r.threshold,
        'stale_duration', r.stale_duration
    ) AS repo
FROM
    github_repos g
LEFT JOIN
    repos r ON g.repo_id = r.id
WHERE
    g.id = $1 -- TODO - based on intallation id or some other
LIMIT 1
`

type GetGithubReposWithCoreRepoRow struct {
	ID             uuid.UUID   `json:"id"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	RepoID         pgtype.UUID `json:"repo_id"`
	InstallationID uuid.UUID   `json:"installation_id"`
	GithubID       int64       `json:"github_id"`
	Name           string      `json:"name"`
	FullName       string      `json:"full_name"`
	Url            string      `json:"url"`
	IsActive       bool        `json:"is_active"`
	Repo           []byte      `json:"repo"`
}

func (q *Queries) GetGithubReposWithCoreRepo(ctx context.Context, id uuid.UUID) (GetGithubReposWithCoreRepoRow, error) {
	row := q.db.QueryRow(ctx, getGithubReposWithCoreRepo, id)
	var i GetGithubReposWithCoreRepoRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepoID,
		&i.InstallationID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Url,
		&i.IsActive,
		&i.Repo,
	)
	return i, err
}

const setRepoIDonGihubRepo = `-- name: SetRepoIDonGihubRepo :exec
UPDATE github_repos
SET repo_id = $2
WHERE id = $1
`

type SetRepoIDonGihubRepoParams struct {
	ID     uuid.UUID   `json:"id"`
	RepoID pgtype.UUID `json:"repo_id"`
}

func (q *Queries) SetRepoIDonGihubRepo(ctx context.Context, arg SetRepoIDonGihubRepoParams) error {
	_, err := q.db.Exec(ctx, setRepoIDonGihubRepo, arg.ID, arg.RepoID)
	return err
}

const suspendedGithubRepo = `-- name: SuspendedGithubRepo :exec
UPDATE github_repos
SET is_active = false
WHERE id = $1
`

func (q *Queries) SuspendedGithubRepo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, suspendedGithubRepo, id)
	return err
}
