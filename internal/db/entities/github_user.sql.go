// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: github_user.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const createGithubUser = `-- name: CreateGithubUser :one
INSERT INTO github_users (user_id, github_id, github_org_id, login)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, user_id, github_id, github_org_id, login
`

type CreateGithubUserParams struct {
	UserID      uuid.UUID `json:"user_id"`
	GithubID    int64     `json:"github_id"`
	GithubOrgID uuid.UUID `json:"github_org_id"`
	Login       string    `json:"login"`
}

func (q *Queries) CreateGithubUser(ctx context.Context, arg CreateGithubUserParams) (GithubUser, error) {
	row := q.db.QueryRow(ctx, createGithubUser,
		arg.UserID,
		arg.GithubID,
		arg.GithubOrgID,
		arg.Login,
	)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}

const deleteGithubUser = `-- name: DeleteGithubUser :one
DELETE FROM github_users
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteGithubUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteGithubUser, id)
	err := row.Scan(&id)
	return id, err
}

const getGithubUserByGithubID = `-- name: GetGithubUserByGithubID :one
SELECT id, created_at, updated_at, user_id, github_id, github_org_id, login
FROM github_users
WHERE github_id = $1
`

func (q *Queries) GetGithubUserByGithubID(ctx context.Context, githubID int64) (GithubUser, error) {
	row := q.db.QueryRow(ctx, getGithubUserByGithubID, githubID)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}

const getGithubUserByGithubOrgID = `-- name: GetGithubUserByGithubOrgID :one
SELECT id, created_at, updated_at, user_id, github_id, github_org_id, login
FROM github_users
WHERE github_org_id = $1
`

func (q *Queries) GetGithubUserByGithubOrgID(ctx context.Context, githubOrgID uuid.UUID) (GithubUser, error) {
	row := q.db.QueryRow(ctx, getGithubUserByGithubOrgID, githubOrgID)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}

const getGithubUserByID = `-- name: GetGithubUserByID :one
SELECT id, created_at, updated_at, user_id, github_id, github_org_id, login
FROM github_users
WHERE id = $1
`

func (q *Queries) GetGithubUserByID(ctx context.Context, id uuid.UUID) (GithubUser, error) {
	row := q.db.QueryRow(ctx, getGithubUserByID, id)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}

const getGithubUserByLogin = `-- name: GetGithubUserByLogin :one
SELECT id, created_at, updated_at, user_id, github_id, github_org_id, login
FROM github_users
WHERE login = $1
`

func (q *Queries) GetGithubUserByLogin(ctx context.Context, login string) (GithubUser, error) {
	row := q.db.QueryRow(ctx, getGithubUserByLogin, login)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}

const getGithubUserByUserID = `-- name: GetGithubUserByUserID :one
SELECT id, created_at, updated_at, user_id, github_id, github_org_id, login
FROM github_users
WHERE user_id = $1
`

func (q *Queries) GetGithubUserByUserID(ctx context.Context, userID uuid.UUID) (GithubUser, error) {
	row := q.db.QueryRow(ctx, getGithubUserByUserID, userID)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}

const updateGithubUser = `-- name: UpdateGithubUser :one
UPDATE github_users
SET user_id = $2, github_id = $3, github_org_id = $4, login = $5
WHERE id = $1
RETURNING id, created_at, updated_at, user_id, github_id, github_org_id, login
`

type UpdateGithubUserParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	GithubID    int64     `json:"github_id"`
	GithubOrgID uuid.UUID `json:"github_org_id"`
	Login       string    `json:"login"`
}

func (q *Queries) UpdateGithubUser(ctx context.Context, arg UpdateGithubUserParams) (GithubUser, error) {
	row := q.db.QueryRow(ctx, updateGithubUser,
		arg.ID,
		arg.UserID,
		arg.GithubID,
		arg.GithubOrgID,
		arg.Login,
	)
	var i GithubUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.GithubID,
		&i.GithubOrgID,
		&i.Login,
	)
	return i, err
}
