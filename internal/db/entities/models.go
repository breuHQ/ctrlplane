// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package entities

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EventProvider string

const (
	EventProviderGithub EventProvider = "github"
	EventProviderSlack  EventProvider = "slack"
)

func (e *EventProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventProvider(s)
	case string:
		*e = EventProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for EventProvider: %T", src)
	}
	return nil
}

type NullEventProvider struct {
	EventProvider EventProvider
	Valid         bool // Valid is true if EventProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventProvider) Scan(value interface{}) error {
	if value == nil {
		ns.EventProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventProvider), nil
}

type FlatEvent struct {
	ID          pgtype.UUID
	Version     string
	ParentID    pgtype.UUID
	Provider    EventProvider
	Scope       string
	Action      string
	Source      string
	SubjectID   pgtype.UUID
	SubjectName string
	Payload     []byte
	TeamID      pgtype.UUID
	UserID      pgtype.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type GithubInstallation struct {
	ID                  pgtype.UUID
	CreatedAt           pgtype.Timestamp
	UpdatedAt           pgtype.Timestamp
	OrgID               pgtype.UUID
	InstallationID      int64
	InstallationLogin   string
	InstallationLoginID int64
	InstallationType    pgtype.Text
	SenderID            int64
	SenderLogin         string
	Status              pgtype.Text
}

type GithubOrg struct {
	ID             pgtype.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	InstallationID pgtype.UUID
	GithubOrgID    int64
	Name           string
}

type GithubRepo struct {
	ID             pgtype.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	RepoID         pgtype.UUID
	InstallationID pgtype.UUID
	GithubID       int64
	Name           string
	FullName       string
	Url            string
	IsActive       pgtype.Bool
}

type GithubUser struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	UserID      pgtype.UUID
	GithubID    int64
	GithubOrgID pgtype.UUID
	Login       string
}

type Messaging struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Provider  string
	Kind      string
	LinkTo    pgtype.UUID
	Data      []byte
}

type OauthAccount struct {
	ID                pgtype.UUID
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
	UserID            pgtype.UUID
	Provider          string
	ProviderAccountID string
	ExpiresAt         pgtype.Timestamp
	Type              pgtype.Text
}

type Org struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	OrgID     pgtype.UUID
	Name      string
	Slug      string
}

type Repo struct {
	ID            pgtype.UUID
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	OrgID         pgtype.UUID
	Name          string
	Provider      string
	ProviderID    string
	DefaultBranch pgtype.Text
	IsMonorepo    pgtype.Bool
	Threshold     pgtype.Int4
	StaleDuration pgtype.Interval
}

type Team struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	OrgID     pgtype.UUID
	Name      string
	Slug      string
}

type TeamUser struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	TeamID    pgtype.UUID
	UserID    pgtype.UUID
	Role      pgtype.Text
	IsActive  bool
	IsAdmin   bool
}

type User struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	OrgID      pgtype.UUID
	Email      string
	FirstName  pgtype.Text
	LastName   pgtype.Text
	Password   pgtype.Text
	IsActive   bool
	IsVerified bool
}
