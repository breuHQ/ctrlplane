// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (name, org_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, org_id, name, slug
`

type CreateTeamParams struct {
	Name  string    `json:"name"`
	OrgID uuid.UUID `json:"org_id"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam, arg.Name, arg.OrgID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.Name,
		&i.Slug,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, created_at, updated_at, org_id, name, slug
FROM teams
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.Name,
		&i.Slug,
	)
	return i, err
}

const getTeamBySlug = `-- name: GetTeamBySlug :one
SELECT id, name
FROM teams
WHERE slug = $1
`

type GetTeamBySlugRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetTeamBySlug(ctx context.Context, slug string) (GetTeamBySlugRow, error) {
	row := q.db.QueryRow(ctx, getTeamBySlug, slug)
	var i GetTeamBySlugRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET name = $2
WHERE id = $1
RETURNING id, created_at, updated_at, org_id, name, slug
`

type UpdateTeamParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, updateTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.Name,
		&i.Slug,
	)
	return i, err
}
