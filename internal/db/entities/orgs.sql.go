// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orgs.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const createDefaultOrg = `-- name: CreateDefaultOrg :one
INSERT INTO orgs (id, name, domain, slug)
VALUES ('00000000-0000-0000-0000-000000000001', 'No Org', 'example.com', 'no-org')
ON CONFLICT (id) DO NOTHING
RETURNING id, created_at, updated_at, name, domain, slug
`

func (q *Queries) CreateDefaultOrg(ctx context.Context) (Org, error) {
	row := q.db.QueryRow(ctx, createDefaultOrg)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Domain,
		&i.Slug,
	)
	return i, err
}

const createOrg = `-- name: CreateOrg :one
INSERT INTO orgs (name, domain, slug)
VALUES ($1, LOWER($2), $3)
RETURNING id, created_at, updated_at, name, domain, slug
`

type CreateOrgParams struct {
	Name  string `json:"name"`
	Lower string `json:"lower"`
	Slug  string `json:"slug"`
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, createOrg, arg.Name, arg.Lower, arg.Slug)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Domain,
		&i.Slug,
	)
	return i, err
}

const getOrgByDomain = `-- name: GetOrgByDomain :one
SELECT id, created_at, updated_at, name, domain, slug
FROM orgs
WHERE LOWER(domain) = LOWER($1)
`

func (q *Queries) GetOrgByDomain(ctx context.Context, lower string) (Org, error) {
	row := q.db.QueryRow(ctx, getOrgByDomain, lower)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Domain,
		&i.Slug,
	)
	return i, err
}

const updateOrg = `-- name: UpdateOrg :one
UPDATE orgs
SET name = $2, domain = LOWER($3), slug = $4
WHERE id = $1
RETURNING id, created_at, updated_at, name, domain, slug
`

type UpdateOrgParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Lower string    `json:"lower"`
	Slug  string    `json:"slug"`
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, updateOrg,
		arg.ID,
		arg.Name,
		arg.Lower,
		arg.Slug,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Domain,
		&i.Slug,
	)
	return i, err
}
