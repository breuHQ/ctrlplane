// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orgs.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const createOrg = `-- name: CreateOrg :one
INSERT INTO orgs (name, domain, slug)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, name, domain, slug
`

type CreateOrgParams struct {
	Name   string `json:"name"`
	Domain string `json:"domain"`
	Slug   string `json:"slug"`
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, createOrg, arg.Name, arg.Domain, arg.Slug)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Domain,
		&i.Slug,
	)
	return i, err
}

const deleteOrg = `-- name: DeleteOrg :exec
DELETE FROM orgs
WHERE id = $1
`

func (q *Queries) DeleteOrg(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrg, id)
	return err
}

const updateOrg = `-- name: UpdateOrg :one
UPDATE orgs
SET name = $2
WHERE id = $1
RETURNING id, created_at, updated_at, name, domain, slug
`

type UpdateOrgParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, updateOrg, arg.ID, arg.Name)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Domain,
		&i.Slug,
	)
	return i, err
}
