// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: github_orgs.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const createGithubOrg = `-- name: CreateGithubOrg :one
INSERT INTO github_orgs (installation_id, github_org_id, name)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, org_id, installation_id, github_org_id, name
`

type CreateGithubOrgParams struct {
	InstallationID uuid.UUID `json:"installation_id"`
	GithubOrgID    int64     `json:"github_org_id"`
	Name           string    `json:"name"`
}

func (q *Queries) CreateGithubOrg(ctx context.Context, arg CreateGithubOrgParams) (GithubOrg, error) {
	row := q.db.QueryRow(ctx, createGithubOrg, arg.InstallationID, arg.GithubOrgID, arg.Name)
	var i GithubOrg
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.InstallationID,
		&i.GithubOrgID,
		&i.Name,
	)
	return i, err
}

const deleteGithubOrg = `-- name: DeleteGithubOrg :exec
DELETE FROM github_orgs
WHERE id = $1
`

func (q *Queries) DeleteGithubOrg(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGithubOrg, id)
	return err
}

const getGithubOrgByGithubOrgID = `-- name: GetGithubOrgByGithubOrgID :one
SELECT id, created_at, updated_at, org_id, installation_id, github_org_id, name
FROM github_orgs
WHERE github_org_id = $1
`

func (q *Queries) GetGithubOrgByGithubOrgID(ctx context.Context, githubOrgID int64) (GithubOrg, error) {
	row := q.db.QueryRow(ctx, getGithubOrgByGithubOrgID, githubOrgID)
	var i GithubOrg
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.InstallationID,
		&i.GithubOrgID,
		&i.Name,
	)
	return i, err
}

const getGithubOrgByID = `-- name: GetGithubOrgByID :one
SELECT id, created_at, updated_at, org_id, installation_id, github_org_id, name
FROM github_orgs
WHERE id = $1
`

func (q *Queries) GetGithubOrgByID(ctx context.Context, id uuid.UUID) (GithubOrg, error) {
	row := q.db.QueryRow(ctx, getGithubOrgByID, id)
	var i GithubOrg
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.InstallationID,
		&i.GithubOrgID,
		&i.Name,
	)
	return i, err
}

const getGithubOrgByInstallationID = `-- name: GetGithubOrgByInstallationID :many
SELECT id, created_at, updated_at, org_id, installation_id, github_org_id, name
FROM github_orgs
WHERE installation_id = $1
`

func (q *Queries) GetGithubOrgByInstallationID(ctx context.Context, installationID uuid.UUID) ([]GithubOrg, error) {
	rows, err := q.db.Query(ctx, getGithubOrgByInstallationID, installationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GithubOrg
	for rows.Next() {
		var i GithubOrg
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrgID,
			&i.InstallationID,
			&i.GithubOrgID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGithubOrg = `-- name: UpdateGithubOrg :one
UPDATE github_orgs
SET installation_id = $2, github_org_id = $3, name = $4
WHERE id = $1
RETURNING id, created_at, updated_at, org_id, installation_id, github_org_id, name
`

type UpdateGithubOrgParams struct {
	ID             uuid.UUID `json:"id"`
	InstallationID uuid.UUID `json:"installation_id"`
	GithubOrgID    int64     `json:"github_org_id"`
	Name           string    `json:"name"`
}

func (q *Queries) UpdateGithubOrg(ctx context.Context, arg UpdateGithubOrgParams) (GithubOrg, error) {
	row := q.db.QueryRow(ctx, updateGithubOrg,
		arg.ID,
		arg.InstallationID,
		arg.GithubOrgID,
		arg.Name,
	)
	var i GithubOrg
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.InstallationID,
		&i.GithubOrgID,
		&i.Name,
	)
	return i, err
}
