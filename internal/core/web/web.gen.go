// Package web is generated by github.com/breuHQ/oapi-codegen,
//
// It is a fork of github.com/deepmap/oapi-codegen/v2, and adds the following features:
//  - Support for custom templates by filename.
//  - Supporting x-breu-entity in the schema to generate a struct for the entity.
//
// Code generated by https://github.com/breuHQ/oapi-codegen, DO NOT EDIT!!

package web

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	externalRef0 "go.breu.io/quantm/internal/core/defs"
	"go.breu.io/quantm/internal/shared"
)

const (
	APIKeyAuthScopes = "APIKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateRepoJSONRequestBody defines body for CreateRepo for application/json ContentType.
type CreateRepoJSONRequestBody = externalRef0.RepoCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Repos
	// (GET /core/repos)
	ListRepos(ctx echo.Context) error

	// Create repo
	// (POST /core/repos)
	CreateRepo(ctx echo.Context) error

	// Get repo
	// (GET /core/repos/{id})
	GetRepo(ctx echo.Context, id string) error

	// SecurityHandler returns the underlying Security Wrapper
	SecureHandler(ctx echo.Context, handler echo.HandlerFunc) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListRepos converts echo context to params.

func (w *ServerInterfaceWrapper) ListRepos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(APIKeyAuthScopes, []string{})

	handler := func(ctx echo.Context) error {
		return w.Handler.ListRepos(ctx)
	}
	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SecureHandler(ctx, handler)

	return err
}

// CreateRepo converts echo context to params.

func (w *ServerInterfaceWrapper) CreateRepo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(APIKeyAuthScopes, []string{})

	handler := func(ctx echo.Context) error {
		return w.Handler.CreateRepo(ctx)
	}
	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SecureHandler(ctx, handler)

	return err
}

// GetRepo converts echo context to params.

func (w *ServerInterfaceWrapper) GetRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return shared.NewAPIError(http.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(APIKeyAuthScopes, []string{})

	handler := func(ctx echo.Context) error {
		return w.Handler.GetRepo(ctx, id)
	}
	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SecureHandler(ctx, handler)

	return err
}

// EchoRouter is an interface that wraps the methods of echo.Echo & echo.Group to provide a common interface
// for registering routes.
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/core/repos", wrapper.ListRepos)
	router.POST(baseURL+"/core/repos", wrapper.CreateRepo)
	router.GET(baseURL+"/core/repos/:id", wrapper.GetRepo)

}
