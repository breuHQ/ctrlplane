// Package defs is generated by github.com/breuHQ/oapi-codegen,
//
// It is a fork of github.com/deepmap/oapi-codegen/v2, and adds the following features:
//  - Support for custom templates by filename.
//  - Supporting x-breu-entity in the schema to generate a struct for the entity.
//
// Code generated by https://github.com/breuHQ/oapi-codegen, DO NOT EDIT!!

package defs

import (
	"encoding/json"
	"errors"
	"time"

	itable "github.com/Guilospanck/igocqlx/table"
	"github.com/gocql/gocql"
	"github.com/scylladb/gocqlx/v2/table"
	"go.breu.io/quantm/internal/shared"
)

var (
	ErrInvalidMessageProvider = errors.New("invalid MessageProvider value")
	ErrInvalidRepoProvider    = errors.New("invalid RepoProvider value")
)

type (
	MessageProviderMapType map[string]MessageProvider // MessageProviderMapType is a quick lookup map for MessageProvider.
)

// Defines values for MessageProvider.
const (
	MessageProviderNone  MessageProvider = "none"
	MessageProviderSlack MessageProvider = "slack"
)

// MessageProviderMap returns all known values for MessageProvider.
var (
	MessageProviderMap = MessageProviderMapType{
		MessageProviderNone.String():  MessageProviderNone,
		MessageProviderSlack.String(): MessageProviderSlack,
	}
)

/*
 * Helper methods for MessageProvider for easy marshalling and unmarshalling.
 */
func (v MessageProvider) String() string               { return string(v) }
func (v MessageProvider) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *MessageProvider) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	val, ok := MessageProviderMap[s]
	if !ok {
		return ErrInvalidMessageProvider
	}

	*v = val

	return nil
}

type (
	RepoProviderMapType map[string]RepoProvider // RepoProviderMapType is a quick lookup map for RepoProvider.
)

// Defines values for RepoProvider.
const (
	RepoProviderBitbucket RepoProvider = "bitbucket"
	RepoProviderGithub    RepoProvider = "github"
	RepoProviderGitlab    RepoProvider = "gitlab"
)

// RepoProviderMap returns all known values for RepoProvider.
var (
	RepoProviderMap = RepoProviderMapType{
		RepoProviderBitbucket.String(): RepoProviderBitbucket,
		RepoProviderGithub.String():    RepoProviderGithub,
		RepoProviderGitlab.String():    RepoProviderGitlab,
	}
)

/*
 * Helper methods for RepoProvider for easy marshalling and unmarshalling.
 */
func (v RepoProvider) String() string               { return string(v) }
func (v RepoProvider) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *RepoProvider) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	val, ok := RepoProviderMap[s]
	if !ok {
		return ErrInvalidRepoProvider
	}

	*v = val

	return nil
}

// MessageProvider defines model for MessageProvider.
type MessageProvider string

// MessageProviderData defines model for MessageProviderData.
type MessageProviderData struct {
	Slack *MessageProviderSlackData `json:"slack,omitempty"`
}

// MessageProviderSlackData defines model for MessageProviderSlackData.
type MessageProviderSlackData struct {
	BotToken      string `json:"bot_token"`
	ChannelID     string `json:"channel_id"`
	ChannelName   string `json:"channel_name"`
	WorkspaceID   string `json:"workspace_id"`
	WorkspaceName string `json:"workspace_name"`
}

// Repo defines model for Repo.
type Repo struct {
	CreatedAt time.Time `cql:"created_at" json:"created_at"`

	// CtrlId references the id field of the repos tables against the provider. For us, this means, that it will be the id field for
	//   - github_repos
	//   - gitlab_repos
	// etc.
	CtrlID              gocql.UUID          `cql:"ctrl_id" json:"ctrl_id"`
	DefaultBranch       string              `cql:"default_branch" json:"default_branch"`
	ID                  gocql.UUID          `cql:"id" json:"id"`
	IsMonorepo          bool                `cql:"is_monorepo" json:"is_monorepo"`
	MessageProvider     MessageProvider     `cql:"message_provider" json:"message_provider"`
	MessageProviderData MessageProviderData `cql:"message_provider_data" json:"message_provider_data"`
	Name                string              `cql:"name" json:"name"`
	Provider            RepoProvider        `cql:"provider" json:"provider"`
	ProviderID          string              `cql:"provider_id" json:"provider_id"`
	StaleDuration       shared.Duration     `cql:"stale_duration" json:"stale_duration"`
	TeamID              gocql.UUID          `cql:"team_id" json:"team_id"`
	Threshold           shared.Int64        `cql:"threshold" json:"threshold"`
	UpdatedAt           time.Time           `cql:"updated_at" json:"updated_at"`
}

var (
	repoMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "repos",
			Columns: []string{"created_at", "ctrl_id", "default_branch", "id", "is_monorepo", "message_provider", "message_provider_data", "name", "provider", "provider_id", "stale_duration", "team_id", "threshold", "updated_at"},
			PartKey: []string{"id", "team_id"},
		},
	}

	repoTable = itable.New(*repoMeta.M)
)

func (repo *Repo) GetTable() itable.ITable {
	return repoTable
}

// RepoCreateRequest defines model for RepoCreateRequest.
type RepoCreateRequest struct {
	CtrlID              gocql.UUID          `json:"ctrl_id"`
	IsMonorepo          bool                `json:"is_monorepo"`
	MessageProvider     MessageProvider     `json:"message_provider"`
	MessageProviderData MessageProviderData `json:"message_provider_data"`
	Provider            RepoProvider        `json:"provider"`
	StaleDuration       shared.Duration     `json:"stale_duration"`
	Threshold           shared.Int64        `json:"threshold"`
}

// RepoListResponse defines model for RepoListResponse.
type RepoListResponse = []Repo

// RepoProvider defines model for RepoProvider.
type RepoProvider string

// RepoProviderData defines model for RepoProviderData.
type RepoProviderData struct {
	DefaultBranch string `json:"default_branch"`
	Name          string `json:"name"`
}
