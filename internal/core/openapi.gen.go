// Package core provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen, a modified copy of github.com/deepmap/oapi-codegen.
// It was modified to add support for the following features:
//  - Support for custom templates by filename.
//  - Supporting x-breu-entity in the schema to generate a struct for the entity.
//
// DO NOT EDIT!!

package core

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	itable "github.com/Guilospanck/igocqlx/table"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gocql/gocql"
	"github.com/labstack/echo/v4"
	"github.com/scylladb/gocqlx/v2/table"
)

const (
	APIKeyAuthScopes = "APIKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

var (
	ErrInvalidRepoProvider = errors.New("invalid RepoProvider value")
)

type (
	RepoProviderMapType map[string]RepoProvider // RepoProviderMapType is a quick lookup map for RepoProvider.
)

// Defines values for RepoProvider.
const (
	RepoProviderBitbucket RepoProvider = "bitbucket"
	RepoProviderGithub    RepoProvider = "github"
	RepoProviderGitlab    RepoProvider = "gitlab"
)

// RepoProviderValues returns all known values for RepoProvider.
var (
	RepoProviderMap = RepoProviderMapType{
		RepoProviderBitbucket.String(): RepoProviderBitbucket,
		RepoProviderGithub.String():    RepoProviderGithub,
		RepoProviderGitlab.String():    RepoProviderGitlab,
	}
)

/*
 * Helper methods for RepoProvider for easy marshalling and unmarshalling.
 */
func (v RepoProvider) String() string               { return string(v) }
func (v RepoProvider) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *RepoProvider) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	val, ok := RepoProviderMap[s]
	if !ok {
		return ErrInvalidRepoProvider
	}

	*v = val

	return nil
}

// Repo defines model for Repo.
type Repo struct {
	CreatedAt     time.Time    `cql:"created_at" json:"created_at"`
	DefaultBranch string       `cql:"default_branch" json:"default_branch"`
	ID            gocql.UUID   `cql:"id" json:"id"`
	IsMonorepo    bool         `cql:"is_monorepo" json:"is_monorepo"`
	Provider      RepoProvider `cql:"provider" json:"provider"`
	ProviderID    string       `cql:"provider_id" json:"provider_id"`
	StackID       gocql.UUID   `cql:"stack_id" json:"stack_id"`
	UpdatedAt     time.Time    `cql:"updated_at" json:"updated_at"`
}

var (
	repoColumns = []string{"created_at", "default_branch", "id", "is_monorepo", "provider", "provider_id", "stack_id", "updated_at"}

	repoMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "repos",
			Columns: repoColumns,
		},
	}

	repoTable = itable.New(*repoMeta.M)
)

func (repo *Repo) GetTable() itable.ITable {
	return repoTable
}

// RepoCreateRequest defines model for RepoCreateRequest.
type RepoCreateRequest struct {
	DefaultBranch string       `json:"default_branch"`
	IsMonorepo    bool         `json:"is_monorepo"`
	Provider      RepoProvider `json:"provider"`
	ProviderID    string       `json:"provider_id"`
	StackID       gocql.UUID   `json:"stack_id"`
}

// RepoListResponse defines model for RepoListResponse.
type RepoListResponse = []Repo

// RepoProvider defines model for RepoProvider.
type RepoProvider string

// Stack defines model for Stack.
type Stack struct {
	Config    StackConfig `cql:"config" json:"config"`
	CreatedAt time.Time   `cql:"created_at" json:"created_at"`
	ID        gocql.UUID  `cql:"id" json:"id"`
	Name      string      `cql:"name" json:"name" validate:"required"`
	Slug      string      `cql:"slug" json:"slug"`
	TeamID    gocql.UUID  `cql:"team_id" json:"team_id"`
	UpdatedAt time.Time   `cql:"updated_at" json:"updated_at"`
}

var (
	stackColumns = []string{"config", "created_at", "id", "name", "slug", "team_id", "updated_at"}

	stackMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "stacks",
			Columns: stackColumns,
		},
	}

	stackTable = itable.New(*stackMeta.M)
)

func (stack *Stack) GetTable() itable.ITable {
	return stackTable
}

// StackConfig defines model for StackConfig.
type StackConfig map[string]interface{}

// StackCreateRequest defines model for StackCreateRequest.
type StackCreateRequest struct {
	Config StackConfig `json:"config"`
	Name   string      `json:"name"`
}

// StackListResponse defines model for StackListResponse.
type StackListResponse = []Stack

// CreateRepoJSONRequestBody defines body for CreateRepo for application/json ContentType.
type CreateRepoJSONRequestBody = RepoCreateRequest

// CreateStackJSONRequestBody defines body for CreateStack for application/json ContentType.
type CreateStackJSONRequestBody = StackCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Repos
	// (GET /core/repos)
	ListRepos(ctx echo.Context) error

	// Create repo
	// (POST /core/repos)
	CreateRepo(ctx echo.Context) error

	// Get repo
	// (GET /core/repos/{id})
	GetRepo(ctx echo.Context) error

	// List stacks
	// (GET /core/stacks)
	ListStacks(ctx echo.Context) error

	// Create stack
	// (POST /core/stacks)
	CreateStack(ctx echo.Context) error

	// Get stack
	// (GET /core/stacks/{slug})
	GetStack(ctx echo.Context) error

	// SecurityHandler returns the underlying Security Wrapper
	SecureHandler(handler echo.HandlerFunc, ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListRepos converts echo context to params.

func (w *ServerInterfaceWrapper) ListRepos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(APIKeyAuthScopes, []string{""})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.ListRepos
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// CreateRepo converts echo context to params.

func (w *ServerInterfaceWrapper) CreateRepo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(APIKeyAuthScopes, []string{""})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.CreateRepo
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// GetRepo converts echo context to params.

func (w *ServerInterfaceWrapper) GetRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(APIKeyAuthScopes, []string{""})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GetRepo
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// ListStacks converts echo context to params.

func (w *ServerInterfaceWrapper) ListStacks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(APIKeyAuthScopes, []string{""})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.ListStacks
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// CreateStack converts echo context to params.

func (w *ServerInterfaceWrapper) CreateStack(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(APIKeyAuthScopes, []string{""})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.CreateStack
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// GetStack converts echo context to params.

func (w *ServerInterfaceWrapper) GetStack(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	ctx.Set(APIKeyAuthScopes, []string{""})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GetStack
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// EchoRouter is an interface that wraps the methods of echo.Echo & echo.Group to provide a common interface
// for registering routes.
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/core/repos", wrapper.ListRepos)
	router.POST(baseURL+"/core/repos", wrapper.CreateRepo)
	router.GET(baseURL+"/core/repos/:id", wrapper.GetRepo)
	router.GET(baseURL+"/core/stacks", wrapper.ListStacks)
	router.POST(baseURL+"/core/stacks", wrapper.CreateStack)
	router.GET(baseURL+"/core/stacks/:slug", wrapper.GetStack)

}
