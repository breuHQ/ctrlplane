// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hooks/slack/v1/slack.proto

package slackv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.breu.io/quantm/internal/proto/hooks/slack/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SlackServiceName is the fully-qualified name of the SlackService service.
	SlackServiceName = "hooks.slack.v1.SlackService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SlackServiceSlackOauthProcedure is the fully-qualified name of the SlackService's SlackOauth RPC.
	SlackServiceSlackOauthProcedure = "/hooks.slack.v1.SlackService/SlackOauth"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	slackServiceServiceDescriptor          = v1.File_hooks_slack_v1_slack_proto.Services().ByName("SlackService")
	slackServiceSlackOauthMethodDescriptor = slackServiceServiceDescriptor.Methods().ByName("SlackOauth")
)

// SlackServiceClient is a client for the hooks.slack.v1.SlackService service.
type SlackServiceClient interface {
	SlackOauth(context.Context, *connect.Request[v1.SlackOauthRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewSlackServiceClient constructs a client for the hooks.slack.v1.SlackService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSlackServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SlackServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &slackServiceClient{
		slackOauth: connect.NewClient[v1.SlackOauthRequest, emptypb.Empty](
			httpClient,
			baseURL+SlackServiceSlackOauthProcedure,
			connect.WithSchema(slackServiceSlackOauthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// slackServiceClient implements SlackServiceClient.
type slackServiceClient struct {
	slackOauth *connect.Client[v1.SlackOauthRequest, emptypb.Empty]
}

// SlackOauth calls hooks.slack.v1.SlackService.SlackOauth.
func (c *slackServiceClient) SlackOauth(ctx context.Context, req *connect.Request[v1.SlackOauthRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.slackOauth.CallUnary(ctx, req)
}

// SlackServiceHandler is an implementation of the hooks.slack.v1.SlackService service.
type SlackServiceHandler interface {
	SlackOauth(context.Context, *connect.Request[v1.SlackOauthRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewSlackServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSlackServiceHandler(svc SlackServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	slackServiceSlackOauthHandler := connect.NewUnaryHandler(
		SlackServiceSlackOauthProcedure,
		svc.SlackOauth,
		connect.WithSchema(slackServiceSlackOauthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/hooks.slack.v1.SlackService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SlackServiceSlackOauthProcedure:
			slackServiceSlackOauthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSlackServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSlackServiceHandler struct{}

func (UnimplementedSlackServiceHandler) SlackOauth(context.Context, *connect.Request[v1.SlackOauthRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hooks.slack.v1.SlackService.SlackOauth is not implemented"))
}
