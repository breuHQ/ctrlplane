// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ctrlplane/auth/v1/orgs.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.breu.io/quantm/internal/proto/ctrlplane/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrgServiceName is the fully-qualified name of the OrgService service.
	OrgServiceName = "ctrlplane.auth.v1.OrgService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgServiceCreateOrgProcedure is the fully-qualified name of the OrgService's CreateOrg RPC.
	OrgServiceCreateOrgProcedure = "/ctrlplane.auth.v1.OrgService/CreateOrg"
	// OrgServiceGetOrgByIDProcedure is the fully-qualified name of the OrgService's GetOrgByID RPC.
	OrgServiceGetOrgByIDProcedure = "/ctrlplane.auth.v1.OrgService/GetOrgByID"
	// OrgServiceUpdateOrgByIDProcedure is the fully-qualified name of the OrgService's UpdateOrgByID
	// RPC.
	OrgServiceUpdateOrgByIDProcedure = "/ctrlplane.auth.v1.OrgService/UpdateOrgByID"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	orgServiceServiceDescriptor             = v1.File_ctrlplane_auth_v1_orgs_proto.Services().ByName("OrgService")
	orgServiceCreateOrgMethodDescriptor     = orgServiceServiceDescriptor.Methods().ByName("CreateOrg")
	orgServiceGetOrgByIDMethodDescriptor    = orgServiceServiceDescriptor.Methods().ByName("GetOrgByID")
	orgServiceUpdateOrgByIDMethodDescriptor = orgServiceServiceDescriptor.Methods().ByName("UpdateOrgByID")
)

// OrgServiceClient is a client for the ctrlplane.auth.v1.OrgService service.
type OrgServiceClient interface {
	// Creates a new organization.
	CreateOrg(context.Context, *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error)
	// Retrieves an organization by its globally unique identifier.
	GetOrgByID(context.Context, *connect.Request[v1.GetOrgByIDRequest]) (*connect.Response[v1.GetOrgByIDResponse], error)
	// Updates an existing organization.
	UpdateOrgByID(context.Context, *connect.Request[v1.UpdateOrgByIDRequest]) (*connect.Response[v1.UpdateOrgByIDResponse], error)
}

// NewOrgServiceClient constructs a client for the ctrlplane.auth.v1.OrgService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrgServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orgServiceClient{
		createOrg: connect.NewClient[v1.CreateOrgRequest, v1.CreateOrgResponse](
			httpClient,
			baseURL+OrgServiceCreateOrgProcedure,
			connect.WithSchema(orgServiceCreateOrgMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrgByID: connect.NewClient[v1.GetOrgByIDRequest, v1.GetOrgByIDResponse](
			httpClient,
			baseURL+OrgServiceGetOrgByIDProcedure,
			connect.WithSchema(orgServiceGetOrgByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrgByID: connect.NewClient[v1.UpdateOrgByIDRequest, v1.UpdateOrgByIDResponse](
			httpClient,
			baseURL+OrgServiceUpdateOrgByIDProcedure,
			connect.WithSchema(orgServiceUpdateOrgByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// orgServiceClient implements OrgServiceClient.
type orgServiceClient struct {
	createOrg     *connect.Client[v1.CreateOrgRequest, v1.CreateOrgResponse]
	getOrgByID    *connect.Client[v1.GetOrgByIDRequest, v1.GetOrgByIDResponse]
	updateOrgByID *connect.Client[v1.UpdateOrgByIDRequest, v1.UpdateOrgByIDResponse]
}

// CreateOrg calls ctrlplane.auth.v1.OrgService.CreateOrg.
func (c *orgServiceClient) CreateOrg(ctx context.Context, req *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error) {
	return c.createOrg.CallUnary(ctx, req)
}

// GetOrgByID calls ctrlplane.auth.v1.OrgService.GetOrgByID.
func (c *orgServiceClient) GetOrgByID(ctx context.Context, req *connect.Request[v1.GetOrgByIDRequest]) (*connect.Response[v1.GetOrgByIDResponse], error) {
	return c.getOrgByID.CallUnary(ctx, req)
}

// UpdateOrgByID calls ctrlplane.auth.v1.OrgService.UpdateOrgByID.
func (c *orgServiceClient) UpdateOrgByID(ctx context.Context, req *connect.Request[v1.UpdateOrgByIDRequest]) (*connect.Response[v1.UpdateOrgByIDResponse], error) {
	return c.updateOrgByID.CallUnary(ctx, req)
}

// OrgServiceHandler is an implementation of the ctrlplane.auth.v1.OrgService service.
type OrgServiceHandler interface {
	// Creates a new organization.
	CreateOrg(context.Context, *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error)
	// Retrieves an organization by its globally unique identifier.
	GetOrgByID(context.Context, *connect.Request[v1.GetOrgByIDRequest]) (*connect.Response[v1.GetOrgByIDResponse], error)
	// Updates an existing organization.
	UpdateOrgByID(context.Context, *connect.Request[v1.UpdateOrgByIDRequest]) (*connect.Response[v1.UpdateOrgByIDResponse], error)
}

// NewOrgServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgServiceHandler(svc OrgServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orgServiceCreateOrgHandler := connect.NewUnaryHandler(
		OrgServiceCreateOrgProcedure,
		svc.CreateOrg,
		connect.WithSchema(orgServiceCreateOrgMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetOrgByIDHandler := connect.NewUnaryHandler(
		OrgServiceGetOrgByIDProcedure,
		svc.GetOrgByID,
		connect.WithSchema(orgServiceGetOrgByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateOrgByIDHandler := connect.NewUnaryHandler(
		OrgServiceUpdateOrgByIDProcedure,
		svc.UpdateOrgByID,
		connect.WithSchema(orgServiceUpdateOrgByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrlplane.auth.v1.OrgService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgServiceCreateOrgProcedure:
			orgServiceCreateOrgHandler.ServeHTTP(w, r)
		case OrgServiceGetOrgByIDProcedure:
			orgServiceGetOrgByIDHandler.ServeHTTP(w, r)
		case OrgServiceUpdateOrgByIDProcedure:
			orgServiceUpdateOrgByIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgServiceHandler struct{}

func (UnimplementedOrgServiceHandler) CreateOrg(context.Context, *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.auth.v1.OrgService.CreateOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetOrgByID(context.Context, *connect.Request[v1.GetOrgByIDRequest]) (*connect.Response[v1.GetOrgByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.auth.v1.OrgService.GetOrgByID is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateOrgByID(context.Context, *connect.Request[v1.UpdateOrgByIDRequest]) (*connect.Response[v1.UpdateOrgByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.auth.v1.OrgService.UpdateOrgByID is not implemented"))
}
