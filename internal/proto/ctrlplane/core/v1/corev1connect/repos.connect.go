// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ctrlplane/core/v1/repos.proto

package corev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.breu.io/quantm/internal/proto/ctrlplane/core/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RepoServiceName is the fully-qualified name of the RepoService service.
	RepoServiceName = "ctrlplane.core.v1.RepoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RepoServiceCreateRepoProcedure is the fully-qualified name of the RepoService's CreateRepo RPC.
	RepoServiceCreateRepoProcedure = "/ctrlplane.core.v1.RepoService/CreateRepo"
	// RepoServiceGetRepoByIDProcedure is the fully-qualified name of the RepoService's GetRepoByID RPC.
	RepoServiceGetRepoByIDProcedure = "/ctrlplane.core.v1.RepoService/GetRepoByID"
	// RepoServiceGetOrgReposByOrgIDProcedure is the fully-qualified name of the RepoService's
	// GetOrgReposByOrgID RPC.
	RepoServiceGetOrgReposByOrgIDProcedure = "/ctrlplane.core.v1.RepoService/GetOrgReposByOrgID"
	// RepoServiceListReposProcedure is the fully-qualified name of the RepoService's ListRepos RPC.
	RepoServiceListReposProcedure = "/ctrlplane.core.v1.RepoService/ListRepos"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	repoServiceServiceDescriptor                  = v1.File_ctrlplane_core_v1_repos_proto.Services().ByName("RepoService")
	repoServiceCreateRepoMethodDescriptor         = repoServiceServiceDescriptor.Methods().ByName("CreateRepo")
	repoServiceGetRepoByIDMethodDescriptor        = repoServiceServiceDescriptor.Methods().ByName("GetRepoByID")
	repoServiceGetOrgReposByOrgIDMethodDescriptor = repoServiceServiceDescriptor.Methods().ByName("GetOrgReposByOrgID")
	repoServiceListReposMethodDescriptor          = repoServiceServiceDescriptor.Methods().ByName("ListRepos")
)

// RepoServiceClient is a client for the ctrlplane.core.v1.RepoService service.
type RepoServiceClient interface {
	// Create org's core repo.
	CreateRepo(context.Context, *connect.Request[v1.CreateRepoRequest]) (*connect.Response[v1.CreateRepoResponse], error)
	// Get org's core repo by id.
	GetRepoByID(context.Context, *connect.Request[v1.GetRepoByIDRequest]) (*connect.Response[v1.GetRepoByIDResponse], error)
	// Get org's core repo by org_id.
	GetOrgReposByOrgID(context.Context, *connect.Request[v1.GetOrgReposByOrgIDRequest]) (*connect.Response[v1.GetOrgReposByOrgIDResponse], error)
	// List all org's repos.
	ListRepos(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReposResponse], error)
}

// NewRepoServiceClient constructs a client for the ctrlplane.core.v1.RepoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RepoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &repoServiceClient{
		createRepo: connect.NewClient[v1.CreateRepoRequest, v1.CreateRepoResponse](
			httpClient,
			baseURL+RepoServiceCreateRepoProcedure,
			connect.WithSchema(repoServiceCreateRepoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRepoByID: connect.NewClient[v1.GetRepoByIDRequest, v1.GetRepoByIDResponse](
			httpClient,
			baseURL+RepoServiceGetRepoByIDProcedure,
			connect.WithSchema(repoServiceGetRepoByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrgReposByOrgID: connect.NewClient[v1.GetOrgReposByOrgIDRequest, v1.GetOrgReposByOrgIDResponse](
			httpClient,
			baseURL+RepoServiceGetOrgReposByOrgIDProcedure,
			connect.WithSchema(repoServiceGetOrgReposByOrgIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRepos: connect.NewClient[emptypb.Empty, v1.ListReposResponse](
			httpClient,
			baseURL+RepoServiceListReposProcedure,
			connect.WithSchema(repoServiceListReposMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// repoServiceClient implements RepoServiceClient.
type repoServiceClient struct {
	createRepo         *connect.Client[v1.CreateRepoRequest, v1.CreateRepoResponse]
	getRepoByID        *connect.Client[v1.GetRepoByIDRequest, v1.GetRepoByIDResponse]
	getOrgReposByOrgID *connect.Client[v1.GetOrgReposByOrgIDRequest, v1.GetOrgReposByOrgIDResponse]
	listRepos          *connect.Client[emptypb.Empty, v1.ListReposResponse]
}

// CreateRepo calls ctrlplane.core.v1.RepoService.CreateRepo.
func (c *repoServiceClient) CreateRepo(ctx context.Context, req *connect.Request[v1.CreateRepoRequest]) (*connect.Response[v1.CreateRepoResponse], error) {
	return c.createRepo.CallUnary(ctx, req)
}

// GetRepoByID calls ctrlplane.core.v1.RepoService.GetRepoByID.
func (c *repoServiceClient) GetRepoByID(ctx context.Context, req *connect.Request[v1.GetRepoByIDRequest]) (*connect.Response[v1.GetRepoByIDResponse], error) {
	return c.getRepoByID.CallUnary(ctx, req)
}

// GetOrgReposByOrgID calls ctrlplane.core.v1.RepoService.GetOrgReposByOrgID.
func (c *repoServiceClient) GetOrgReposByOrgID(ctx context.Context, req *connect.Request[v1.GetOrgReposByOrgIDRequest]) (*connect.Response[v1.GetOrgReposByOrgIDResponse], error) {
	return c.getOrgReposByOrgID.CallUnary(ctx, req)
}

// ListRepos calls ctrlplane.core.v1.RepoService.ListRepos.
func (c *repoServiceClient) ListRepos(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReposResponse], error) {
	return c.listRepos.CallUnary(ctx, req)
}

// RepoServiceHandler is an implementation of the ctrlplane.core.v1.RepoService service.
type RepoServiceHandler interface {
	// Create org's core repo.
	CreateRepo(context.Context, *connect.Request[v1.CreateRepoRequest]) (*connect.Response[v1.CreateRepoResponse], error)
	// Get org's core repo by id.
	GetRepoByID(context.Context, *connect.Request[v1.GetRepoByIDRequest]) (*connect.Response[v1.GetRepoByIDResponse], error)
	// Get org's core repo by org_id.
	GetOrgReposByOrgID(context.Context, *connect.Request[v1.GetOrgReposByOrgIDRequest]) (*connect.Response[v1.GetOrgReposByOrgIDResponse], error)
	// List all org's repos.
	ListRepos(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReposResponse], error)
}

// NewRepoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepoServiceHandler(svc RepoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	repoServiceCreateRepoHandler := connect.NewUnaryHandler(
		RepoServiceCreateRepoProcedure,
		svc.CreateRepo,
		connect.WithSchema(repoServiceCreateRepoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repoServiceGetRepoByIDHandler := connect.NewUnaryHandler(
		RepoServiceGetRepoByIDProcedure,
		svc.GetRepoByID,
		connect.WithSchema(repoServiceGetRepoByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repoServiceGetOrgReposByOrgIDHandler := connect.NewUnaryHandler(
		RepoServiceGetOrgReposByOrgIDProcedure,
		svc.GetOrgReposByOrgID,
		connect.WithSchema(repoServiceGetOrgReposByOrgIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repoServiceListReposHandler := connect.NewUnaryHandler(
		RepoServiceListReposProcedure,
		svc.ListRepos,
		connect.WithSchema(repoServiceListReposMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrlplane.core.v1.RepoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RepoServiceCreateRepoProcedure:
			repoServiceCreateRepoHandler.ServeHTTP(w, r)
		case RepoServiceGetRepoByIDProcedure:
			repoServiceGetRepoByIDHandler.ServeHTTP(w, r)
		case RepoServiceGetOrgReposByOrgIDProcedure:
			repoServiceGetOrgReposByOrgIDHandler.ServeHTTP(w, r)
		case RepoServiceListReposProcedure:
			repoServiceListReposHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRepoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepoServiceHandler struct{}

func (UnimplementedRepoServiceHandler) CreateRepo(context.Context, *connect.Request[v1.CreateRepoRequest]) (*connect.Response[v1.CreateRepoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.core.v1.RepoService.CreateRepo is not implemented"))
}

func (UnimplementedRepoServiceHandler) GetRepoByID(context.Context, *connect.Request[v1.GetRepoByIDRequest]) (*connect.Response[v1.GetRepoByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.core.v1.RepoService.GetRepoByID is not implemented"))
}

func (UnimplementedRepoServiceHandler) GetOrgReposByOrgID(context.Context, *connect.Request[v1.GetOrgReposByOrgIDRequest]) (*connect.Response[v1.GetOrgReposByOrgIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.core.v1.RepoService.GetOrgReposByOrgID is not implemented"))
}

func (UnimplementedRepoServiceHandler) ListRepos(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReposResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrlplane.core.v1.RepoService.ListRepos is not implemented"))
}
