{{- if gt (len .SecuritySchemeProviderNames) 0 }}
const (
{{range $ProviderName := .SecuritySchemeProviderNames}}
  {{- $ProviderName | sanitizeGoIdentity | ucFirst}}Scopes = "{{$ProviderName}}.Scopes"
{{end}}
)
{{end}}

{{- if gt (len .EnumDefinitions) 0}}
var(
  {{range $Enum := .EnumDefinitions}}ErrInvalid{{$Enum.TypeName}} = errors.New("invalid {{$Enum.TypeName}} value")
  {{end}}
)
{{end}}

{{range $Enum := .EnumDefinitions}}
type (
  {{$Enum.TypeName}}MapType map[string]{{$Enum.TypeName}}   // {{$Enum.TypeName}}MapType is a quick lookup map for {{$Enum.TypeName}}.
)

// Defines values for {{$Enum.TypeName}}.
const (
{{range $name, $value := $Enum.GetValues}}
  {{$name}} {{$Enum.TypeName}} = {{$Enum.ValueWrapper}}{{$value}}{{$Enum.ValueWrapper -}}
{{end}}
)

// {{$Enum.TypeName}}Values returns all known values for {{$Enum.TypeName}}.
var (
  {{$Enum.TypeName}}Map = {{$Enum.TypeName}}MapType{
    {{range $name, $value := $Enum.GetValues}}{{$name}}.String(): {{$name}},
    {{end}}
  }
)

/*
 * Helper methods for {{$Enum.TypeName}} for easy marshalling and unmarshalling.
 */
func (v {{$Enum.TypeName}}) String() string { return string(v) }
func (v {{$Enum.TypeName}}) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *{{$Enum.TypeName}}) UnmarshalJSON(data []byte) error {
  var s string
  if err := json.Unmarshal(data, &s); err != nil {
    return err
  }

  val, ok := {{$Enum.TypeName}}Map[s]
  if !ok {
    return ErrInvalid{{$Enum.TypeName}}
  }

  *v = val

  return nil
}

{{end}}
