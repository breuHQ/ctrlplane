// Package github provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/breuHQ/oapi-codegen, a modified copy of github.com/deepmap/oapi-codegen/v2.
//
// It was modified to add support for the following features:
//  - Support for custom templates by filename.
//  - Supporting x-breu-entity in the schema to generate a struct for the entity.
//
// DO NOT EDIT!!

package github

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	itable "github.com/Guilospanck/igocqlx/table"
	"github.com/gocql/gocql"
	"github.com/labstack/echo/v4"
	"github.com/scylladb/gocqlx/v2/table"
	externalRef0 "go.breu.io/quantm/internal/shared"
)

const (
	APIKeyAuthScopes = "APIKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

var (
	ErrInvalidOCIImageRegistry = errors.New("invalid OCIImageRegistry value")
	ErrInvalidSetupAction      = errors.New("invalid SetupAction value")
	ErrInvalidWorkflowStatus   = errors.New("invalid WorkflowStatus value")
)

type (
	OCIImageRegistryMapType map[string]OCIImageRegistry // OCIImageRegistryMapType is a quick lookup map for OCIImageRegistry.
)

// Defines values for OCIImageRegistry.
const (
	OCIImageRegistryGCPArtifactRegistry  OCIImageRegistry = "GCPArtifactRegistry"
	OCIImageRegistryGCPContainerRegistry OCIImageRegistry = "GCPContainerRegistry"
)

// OCIImageRegistryMap returns all known values for OCIImageRegistry.
var (
	OCIImageRegistryMap = OCIImageRegistryMapType{
		OCIImageRegistryGCPArtifactRegistry.String():  OCIImageRegistryGCPArtifactRegistry,
		OCIImageRegistryGCPContainerRegistry.String(): OCIImageRegistryGCPContainerRegistry,
	}
)

/*
 * Helper methods for OCIImageRegistry for easy marshalling and unmarshalling.
 */
func (v OCIImageRegistry) String() string               { return string(v) }
func (v OCIImageRegistry) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *OCIImageRegistry) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	val, ok := OCIImageRegistryMap[s]
	if !ok {
		return ErrInvalidOCIImageRegistry
	}

	*v = val

	return nil
}

type (
	SetupActionMapType map[string]SetupAction // SetupActionMapType is a quick lookup map for SetupAction.
)

// Defines values for SetupAction.
const (
	SetupActionDelete  SetupAction = "delete"
	SetupActionInstall SetupAction = "install"
	SetupActionUpdate  SetupAction = "update"
)

// SetupActionMap returns all known values for SetupAction.
var (
	SetupActionMap = SetupActionMapType{
		SetupActionDelete.String():  SetupActionDelete,
		SetupActionInstall.String(): SetupActionInstall,
		SetupActionUpdate.String():  SetupActionUpdate,
	}
)

/*
 * Helper methods for SetupAction for easy marshalling and unmarshalling.
 */
func (v SetupAction) String() string               { return string(v) }
func (v SetupAction) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *SetupAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	val, ok := SetupActionMap[s]
	if !ok {
		return ErrInvalidSetupAction
	}

	*v = val

	return nil
}

type (
	WorkflowStatusMapType map[string]WorkflowStatus // WorkflowStatusMapType is a quick lookup map for WorkflowStatus.
)

// Defines values for WorkflowStatus.
const (
	WorkflowStatusFailure  WorkflowStatus = "failure"
	WorkflowStatusQueued   WorkflowStatus = "queued"
	WorkflowStatusSignaled WorkflowStatus = "signaled"
	WorkflowStatusSkipped  WorkflowStatus = "skipped"
	WorkflowStatusSuccess  WorkflowStatus = "success"
)

// WorkflowStatusMap returns all known values for WorkflowStatus.
var (
	WorkflowStatusMap = WorkflowStatusMapType{
		WorkflowStatusFailure.String():  WorkflowStatusFailure,
		WorkflowStatusQueued.String():   WorkflowStatusQueued,
		WorkflowStatusSignaled.String(): WorkflowStatusSignaled,
		WorkflowStatusSkipped.String():  WorkflowStatusSkipped,
		WorkflowStatusSuccess.String():  WorkflowStatusSuccess,
	}
)

/*
 * Helper methods for WorkflowStatus for easy marshalling and unmarshalling.
 */
func (v WorkflowStatus) String() string               { return string(v) }
func (v WorkflowStatus) MarshalJSON() ([]byte, error) { return json.Marshal(v.String()) }
func (v *WorkflowStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	val, ok := WorkflowStatusMap[s]
	if !ok {
		return ErrInvalidWorkflowStatus
	}

	*v = val

	return nil
}

// ArtifactReadyRequest defines model for ArtifactReadyRequest.
type ArtifactReadyRequest struct {
	Digest         string           `json:"digest"`
	Image          string           `json:"image"`
	InstallationID string           `json:"installation_id"`
	PullRequestID  string           `json:"pull_request_id"`
	Registry       OCIImageRegistry `json:"registry"`
	RepoID         string           `json:"repo_id"`
}

var (
	artifactreadyrequestMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "github_artifact",
			Columns: []string{"digest", "image", "installation_id", "pull_request_id", "registry", "repo_id"},
			PartKey: []string{},
		},
	}

	artifactreadyrequestTable = itable.New(*artifactreadyrequestMeta.M)
)

func (artifactreadyrequest *ArtifactReadyRequest) GetTable() itable.ITable {
	return artifactreadyrequestTable
}

// CliGitMerge branch name and repo info is sent to quantm via quantum-cli.
type CliGitMerge struct {
	Branch    string `json:"branch"`
	RepoName  string `json:"repo_name"`
	RepoOwner string `json:"repo_owner"`
}

// CompleteInstallationRequest complete the installation given the installation_id & setup_action.
type CompleteInstallationRequest struct {
	InstallationID int64       `json:"installation_id"`
	SetupAction    SetupAction `json:"setup_action"`
}

// GithubActionResultRequest github action result is sent to quantum along with branch name.
type GithubActionResultRequest struct {
	Branch    string `json:"branch"`
	RepoID    string `json:"repo_id"`
	RepoName  string `json:"repo_name"`
	RepoOwner string `json:"repo_owner"`
	Result    string `json:"result"`
}

// GithubEventsState defines model for GithubEventsState.
type GithubEventsState struct {
	CreatedAt           time.Time  `json:"created_at"`
	EventType           string     `json:"event_type"`
	EventsData          string     `json:"events_data"`
	GithubWorkflowID    int64      `json:"github_workflow_id"`
	GithubWorkflowRunID int64      `json:"github_workflow_run_id"`
	ID                  gocql.UUID `json:"id"`
	RepoName            string     `json:"repo_name"`
	Status              string     `json:"status"`
	UpdatedAt           time.Time  `json:"updated_at"`
}

var (
	githubeventsstateMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "github_events_state",
			Columns: []string{"created_at", "event_type", "events_data", "github_workflow_id", "github_workflow_run_id", "id", "repo_name", "status", "updated_at"},
			PartKey: []string{},
		},
	}

	githubeventsstateTable = itable.New(*githubeventsstateMeta.M)
)

func (githubeventsstate *GithubEventsState) GetTable() itable.ITable {
	return githubeventsstateTable
}

// Installation defines model for GithubInstallation.
type Installation struct {
	CreatedAt         time.Time  `json:"created_at"`
	ID                gocql.UUID `json:"id"`
	InstallationID    int64      `json:"installation_id" validate:"required,db_unique"`
	InstallationLogin string     `json:"installation_login"`
	InstallationType  string     `json:"installation_type"`
	SenderID          int64      `json:"sender_id"`
	SenderLogin       string     `json:"sender_login"`
	Status            string     `json:"status"`
	TeamID            gocql.UUID `json:"team_id"`
	UpdatedAt         time.Time  `json:"updated_at"`
}

var (
	githubinstallationMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "github_installations",
			Columns: []string{"created_at", "id", "installation_id", "installation_login", "installation_type", "sender_id", "sender_login", "status", "team_id", "updated_at"},
			PartKey: []string{"team_id"},
		},
	}

	githubinstallationTable = itable.New(*githubinstallationMeta.M)
)

func (githubinstallation *Installation) GetTable() itable.ITable {
	return githubinstallationTable
}

// Repo defines model for GithubRepo.
type Repo struct {
	CreatedAt       time.Time  `json:"created_at"`
	DefaultBranch   string     `json:"default_branch"`
	FullName        string     `json:"full_name"`
	GithubID        int64      `json:"github_id"`
	HasEarlyWarning bool       `json:"has_early_warning"`
	ID              gocql.UUID `json:"id"`
	InstallationID  int64      `json:"installation_id"`
	IsActive        bool       `json:"is_active"`
	Name            string     `json:"name"`
	TeamID          gocql.UUID `json:"team_id"`
	UpdatedAt       time.Time  `json:"updated_at"`
}

var (
	githubrepoMeta = itable.Metadata{
		M: &table.Metadata{
			Name:    "github_repos",
			Columns: []string{"created_at", "default_branch", "full_name", "github_id", "has_early_warning", "id", "installation_id", "is_active", "name", "team_id", "updated_at"},
			PartKey: []string{"team_id"},
		},
	}

	githubrepoTable = itable.New(*githubrepoMeta.M)
)

func (githubrepo *Repo) GetTable() itable.ITable {
	return githubrepoTable
}

// OCIImageRegistry defines model for OCIImageRegistry.
type OCIImageRegistry string

// SetupAction defines model for SetupAction.
type SetupAction string

// WorkflowResponse workflow status & run id.
type WorkflowResponse struct {
	RunID string `json:"run_id"`

	// Status the workflow status
	Status WorkflowStatus `json:"status"`
}

// WorkflowStatus the workflow status.
type WorkflowStatus string

// GithubArtifactReadyJSONRequestBody defines body for GithubArtifactReady for application/json ContentType.
type GithubArtifactReadyJSONRequestBody = ArtifactReadyRequest

// GithubActionResultJSONRequestBody defines body for GithubActionResult for application/json ContentType.
type GithubActionResultJSONRequestBody = GithubActionResultRequest

// CliGitMergeJSONRequestBody defines body for CliGitMerge for application/json ContentType.
type CliGitMergeJSONRequestBody = CliGitMerge

// GithubCompleteInstallationJSONRequestBody defines body for GithubCompleteInstallation for application/json ContentType.
type GithubCompleteInstallationJSONRequestBody = CompleteInstallationRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GithubArtifactReadyWithBody request with any body
	GithubArtifactReadyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GithubArtifactReady(ctx context.Context, body GithubArtifactReadyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GithubActionResultWithBody request with any body
	GithubActionResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GithubActionResult(ctx context.Context, body GithubActionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CliGitMergeWithBody request with any body
	CliGitMergeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CliGitMerge(ctx context.Context, body CliGitMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GithubCompleteInstallationWithBody request with any body
	GithubCompleteInstallationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GithubCompleteInstallation(ctx context.Context, body GithubCompleteInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GithubGetInstallations request
	GithubGetInstallations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GithubGetRepos request
	GithubGetRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GithubWebhook request
	GithubWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GithubArtifactReadyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubArtifactReadyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubArtifactReady(ctx context.Context, body GithubArtifactReadyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubArtifactReadyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubActionResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubActionResultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubActionResult(ctx context.Context, body GithubActionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubActionResultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CliGitMergeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCliGitMergeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CliGitMerge(ctx context.Context, body CliGitMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCliGitMergeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubCompleteInstallationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubCompleteInstallationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubCompleteInstallation(ctx context.Context, body GithubCompleteInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubCompleteInstallationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubGetInstallations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubGetInstallationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubGetRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubGetReposRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GithubWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGithubWebhookRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGithubArtifactReadyRequest calls the generic GithubArtifactReady builder with application/json body
func NewGithubArtifactReadyRequest(server string, body GithubArtifactReadyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGithubArtifactReadyRequestWithBody(server, "application/json", bodyReader)
}

// NewGithubArtifactReadyRequestWithBody generates requests for GithubArtifactReady with any type of body
func NewGithubArtifactReadyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/artifact-ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGithubActionResultRequest calls the generic GithubActionResult builder with application/json body
func NewGithubActionResultRequest(server string, body GithubActionResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGithubActionResultRequestWithBody(server, "application/json", bodyReader)
}

// NewGithubActionResultRequestWithBody generates requests for GithubActionResult with any type of body
func NewGithubActionResultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/cicd-result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCliGitMergeRequest calls the generic CliGitMerge builder with application/json body
func NewCliGitMergeRequest(server string, body CliGitMergeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCliGitMergeRequestWithBody(server, "application/json", bodyReader)
}

// NewCliGitMergeRequestWithBody generates requests for CliGitMerge with any type of body
func NewCliGitMergeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/cli-git-merge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGithubCompleteInstallationRequest calls the generic GithubCompleteInstallation builder with application/json body
func NewGithubCompleteInstallationRequest(server string, body GithubCompleteInstallationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGithubCompleteInstallationRequestWithBody(server, "application/json", bodyReader)
}

// NewGithubCompleteInstallationRequestWithBody generates requests for GithubCompleteInstallation with any type of body
func NewGithubCompleteInstallationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/complete-installation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGithubGetInstallationsRequest generates requests for GithubGetInstallations
func NewGithubGetInstallationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/installations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGithubGetReposRequest generates requests for GithubGetRepos
func NewGithubGetReposRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGithubWebhookRequest generates requests for GithubWebhook
func NewGithubWebhookRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/github/webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GithubArtifactReadyWithBodyWithResponse request with any body
	GithubArtifactReadyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GithubArtifactReadyResponse, error)

	GithubArtifactReadyWithResponse(ctx context.Context, body GithubArtifactReadyJSONRequestBody, reqEditors ...RequestEditorFn) (*GithubArtifactReadyResponse, error)

	// GithubActionResultWithBodyWithResponse request with any body
	GithubActionResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GithubActionResultResponse, error)

	GithubActionResultWithResponse(ctx context.Context, body GithubActionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*GithubActionResultResponse, error)

	// CliGitMergeWithBodyWithResponse request with any body
	CliGitMergeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CliGitMergeResponse, error)

	CliGitMergeWithResponse(ctx context.Context, body CliGitMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*CliGitMergeResponse, error)

	// GithubCompleteInstallationWithBodyWithResponse request with any body
	GithubCompleteInstallationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GithubCompleteInstallationResponse, error)

	GithubCompleteInstallationWithResponse(ctx context.Context, body GithubCompleteInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*GithubCompleteInstallationResponse, error)

	// GithubGetInstallationsWithResponse request
	GithubGetInstallationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GithubGetInstallationsResponse, error)

	// GithubGetReposWithResponse request
	GithubGetReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GithubGetReposResponse, error)

	// GithubWebhookWithResponse request
	GithubWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GithubWebhookResponse, error)
}

type GithubArtifactReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkflowResponse
	JSON400      *externalRef0.BadRequest
	JSON401      *externalRef0.Unauthorized
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GithubArtifactReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GithubArtifactReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GithubActionResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GithubActionResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GithubActionResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CliGitMergeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r CliGitMergeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CliGitMergeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GithubCompleteInstallationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkflowResponse
	JSON400      *externalRef0.BadRequest
	JSON401      *externalRef0.Unauthorized
	JSON404      *externalRef0.NotFound
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GithubCompleteInstallationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GithubCompleteInstallationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GithubGetInstallationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Installation
	JSON400      *externalRef0.BadRequest
	JSON401      *externalRef0.Unauthorized
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GithubGetInstallationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GithubGetInstallationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GithubGetReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Repo
	JSON400      *externalRef0.BadRequest
	JSON401      *externalRef0.Unauthorized
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GithubGetReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GithubGetReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GithubWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowResponse
	JSON201      *WorkflowResponse
	JSON400      *externalRef0.BadRequest
	JSON500      *externalRef0.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GithubWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GithubWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GithubArtifactReadyWithBodyWithResponse request with arbitrary body returning *GithubArtifactReadyResponse
func (c *ClientWithResponses) GithubArtifactReadyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GithubArtifactReadyResponse, error) {
	rsp, err := c.GithubArtifactReadyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubArtifactReadyResponse(rsp)
}

func (c *ClientWithResponses) GithubArtifactReadyWithResponse(ctx context.Context, body GithubArtifactReadyJSONRequestBody, reqEditors ...RequestEditorFn) (*GithubArtifactReadyResponse, error) {
	rsp, err := c.GithubArtifactReady(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubArtifactReadyResponse(rsp)
}

// GithubActionResultWithBodyWithResponse request with arbitrary body returning *GithubActionResultResponse
func (c *ClientWithResponses) GithubActionResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GithubActionResultResponse, error) {
	rsp, err := c.GithubActionResultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubActionResultResponse(rsp)
}

func (c *ClientWithResponses) GithubActionResultWithResponse(ctx context.Context, body GithubActionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*GithubActionResultResponse, error) {
	rsp, err := c.GithubActionResult(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubActionResultResponse(rsp)
}

// CliGitMergeWithBodyWithResponse request with arbitrary body returning *CliGitMergeResponse
func (c *ClientWithResponses) CliGitMergeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CliGitMergeResponse, error) {
	rsp, err := c.CliGitMergeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCliGitMergeResponse(rsp)
}

func (c *ClientWithResponses) CliGitMergeWithResponse(ctx context.Context, body CliGitMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*CliGitMergeResponse, error) {
	rsp, err := c.CliGitMerge(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCliGitMergeResponse(rsp)
}

// GithubCompleteInstallationWithBodyWithResponse request with arbitrary body returning *GithubCompleteInstallationResponse
func (c *ClientWithResponses) GithubCompleteInstallationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GithubCompleteInstallationResponse, error) {
	rsp, err := c.GithubCompleteInstallationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubCompleteInstallationResponse(rsp)
}

func (c *ClientWithResponses) GithubCompleteInstallationWithResponse(ctx context.Context, body GithubCompleteInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*GithubCompleteInstallationResponse, error) {
	rsp, err := c.GithubCompleteInstallation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubCompleteInstallationResponse(rsp)
}

// GithubGetInstallationsWithResponse request returning *GithubGetInstallationsResponse
func (c *ClientWithResponses) GithubGetInstallationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GithubGetInstallationsResponse, error) {
	rsp, err := c.GithubGetInstallations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubGetInstallationsResponse(rsp)
}

// GithubGetReposWithResponse request returning *GithubGetReposResponse
func (c *ClientWithResponses) GithubGetReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GithubGetReposResponse, error) {
	rsp, err := c.GithubGetRepos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubGetReposResponse(rsp)
}

// GithubWebhookWithResponse request returning *GithubWebhookResponse
func (c *ClientWithResponses) GithubWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GithubWebhookResponse, error) {
	rsp, err := c.GithubWebhook(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGithubWebhookResponse(rsp)
}

// ParseGithubArtifactReadyResponse parses an HTTP response from a GithubArtifactReadyWithResponse call
func ParseGithubArtifactReadyResponse(rsp *http.Response) (*GithubArtifactReadyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GithubArtifactReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGithubActionResultResponse parses an HTTP response from a GithubActionResultWithResponse call
func ParseGithubActionResultResponse(rsp *http.Response) (*GithubActionResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GithubActionResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCliGitMergeResponse parses an HTTP response from a CliGitMergeWithResponse call
func ParseCliGitMergeResponse(rsp *http.Response) (*CliGitMergeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CliGitMergeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGithubCompleteInstallationResponse parses an HTTP response from a GithubCompleteInstallationWithResponse call
func ParseGithubCompleteInstallationResponse(rsp *http.Response) (*GithubCompleteInstallationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GithubCompleteInstallationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGithubGetInstallationsResponse parses an HTTP response from a GithubGetInstallationsWithResponse call
func ParseGithubGetInstallationsResponse(rsp *http.Response) (*GithubGetInstallationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GithubGetInstallationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Installation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGithubGetReposResponse parses an HTTP response from a GithubGetReposWithResponse call
func ParseGithubGetReposResponse(rsp *http.Response) (*GithubGetReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GithubGetReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGithubWebhookResponse parses an HTTP response from a GithubWebhookWithResponse call
func ParseGithubWebhookResponse(rsp *http.Response) (*GithubWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GithubWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GitHub release artifact ready
	// (POST /providers/github/artifact-ready)
	GithubArtifactReady(ctx echo.Context) error

	// Receive result from github action CICD
	// (POST /providers/github/cicd-result)
	GithubActionResult(ctx echo.Context) error

	// Receive git merge command from quantm cli
	// (POST /providers/github/cli-git-merge)
	CliGitMerge(ctx echo.Context) error

	// Complete GitHub App installation
	// (POST /providers/github/complete-installation)
	GithubCompleteInstallation(ctx echo.Context) error

	// Get GitHub installations
	// (GET /providers/github/installations)
	GithubGetInstallations(ctx echo.Context) error

	// Get GitHub repositories
	// (GET /providers/github/repos)
	GithubGetRepos(ctx echo.Context) error

	// Webhook reciever for github
	// (POST /providers/github/webhook)
	GithubWebhook(ctx echo.Context) error

	// SecurityHandler returns the underlying Security Wrapper
	SecureHandler(handler echo.HandlerFunc, ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GithubArtifactReady converts echo context to params.

func (w *ServerInterfaceWrapper) GithubArtifactReady(ctx echo.Context) error {
	var err error

	ctx.Set(APIKeyAuthScopes, []string{})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GithubArtifactReady
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// GithubActionResult converts echo context to params.

func (w *ServerInterfaceWrapper) GithubActionResult(ctx echo.Context) error {
	var err error

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GithubActionResult
	err = handler(ctx)

	return err
}

// CliGitMerge converts echo context to params.

func (w *ServerInterfaceWrapper) CliGitMerge(ctx echo.Context) error {
	var err error

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.CliGitMerge
	err = handler(ctx)

	return err
}

// GithubCompleteInstallation converts echo context to params.

func (w *ServerInterfaceWrapper) GithubCompleteInstallation(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(APIKeyAuthScopes, []string{})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GithubCompleteInstallation
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// GithubGetInstallations converts echo context to params.

func (w *ServerInterfaceWrapper) GithubGetInstallations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(APIKeyAuthScopes, []string{})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GithubGetInstallations
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// GithubGetRepos converts echo context to params.

func (w *ServerInterfaceWrapper) GithubGetRepos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(APIKeyAuthScopes, []string{})

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GithubGetRepos
	secure := w.Handler.SecureHandler
	err = secure(handler, ctx)

	return err
}

// GithubWebhook converts echo context to params.

func (w *ServerInterfaceWrapper) GithubWebhook(ctx echo.Context) error {
	var err error

	// Get the handler, get the secure handler if needed and then invoke with unmarshalled params.
	handler := w.Handler.GithubWebhook
	err = handler(ctx)

	return err
}

// EchoRouter is an interface that wraps the methods of echo.Echo & echo.Group to provide a common interface
// for registering routes.
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/providers/github/artifact-ready", wrapper.GithubArtifactReady)
	router.POST(baseURL+"/providers/github/cicd-result", wrapper.GithubActionResult)
	router.POST(baseURL+"/providers/github/cli-git-merge", wrapper.CliGitMerge)
	router.POST(baseURL+"/providers/github/complete-installation", wrapper.GithubCompleteInstallation)
	router.GET(baseURL+"/providers/github/installations", wrapper.GithubGetInstallations)
	router.GET(baseURL+"/providers/github/repos", wrapper.GithubGetRepos)
	router.POST(baseURL+"/providers/github/webhook", wrapper.GithubWebhook)

}
